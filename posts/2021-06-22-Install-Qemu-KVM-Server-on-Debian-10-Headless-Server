---
title: "Install QEMU/KVM Server on Debian 10 Headless Server"
date: 2021-06-22T12:55:33+08:00
#draft: true
tags:
- QEMU
- KVM
- Debian
- Linux
Categories
- Linux
---

Kernel based Virtual Machine (KVM) is a widely used free and open source type 2 hypervisor for Linux distributions.

This post described a workthrough on how to install and configure QEMU/KVM on a Debian 10/buster server.

<!--more-->

# 1. Prerequistes

* A headless Debian 10/buster server, of which ip address is: 192.168.1.100.
* All commands in this walkthrough were input over SSH session to above server.
* A VNC (Virtual Network Computing) client in client computer. Available VNC clients are:
    * [RealVNC VNC Viewer](https://www.realvnc.com/en/connect/download/viewer/)
    * [TightVNC Java Viewer](https://www.tightvnc.com/download.php)
    
# 2. Check whether virtualization extension is enabled

Login to the Debian 10 server and run the below command:

```bash
egrep --color 'vmx|svm' /proc/cpuinfo
```

Output might be like:

```bash
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts md_clear flush_l1d
```

If the output contains **vmx** then you have a Intel based processor and **svm** confirms that it is AMD processor.

# 3. Start default network

List available networks for VMs:

```bash
sudo virsh net-list --all
```

Got:

```bash
 Name      State      Autostart   Persistent
----------------------------------------------
 default   inactive   no          yes
```

Here we need to make the default network active and auto-start later:

```bash
sudo virsh net-start default

sudo virsh net-autostart default
```

And add `vhost_net` kernel module to improve the VMs performance:

```bash
sudo modprobe vhost_net

echo "vhost_net" | sudo tee -a /etc/modules
```

Check available mod:

```bash
lsmod | grep vhost
```

Output like:

```bash
vhost_net              24576  0
vhost                  49152  1 vhost_net
tap                    28672  1 vhost_net
tun                    49152  2 vhost_net
```

# 4. Install QEMU-KVM and Libvirt packages

Simply run:

```bash
sudo apt update
sudo apt install qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils libguestfs-tools genisoimage virtinst libosinfo-bin
```

Once above packages are installed successfully then libvirtd service will be started automatically, run the below systemctl command to verify the status

```bash
systemctl status libvirtd.service
```

The output might like:

```
● libvirtd.service - Virtualization daemon
   Loaded: loaded (/lib/systemd/system/libvirtd.service; enabled; vendor preset:
   Active: active (running) since Tue 2021-06-22 10:18:37 CST; 4h 26min ago
     Docs: man:libvirtd(8)
           https://libvirt.org
 Main PID: 2077 (libvirtd)
    Tasks: 64 (limit: 32768)
   Memory: 62.2M
   CGroup: /system.slice/libvirtd.service
           ├─2077 /usr/sbin/libvirtd
           ├─...
```

## 4.1 Allow normal user to manage virtual machine

If you want normal user (*e.g.*, `myuser`) can manage virtual machines, add the user to libvirt abd libvirt-qemu groups:

```bash
sudo adduser myuser libvirt
sudo adduser myuser libvirt-qemu
```

And refresh group membership with:

```bash
newgrp libvirt
newgrp libvirt-qemu
```

# 5. Create Linux bridge for KVM VMs

A networking bridge `virbr0` has been created for test environment. But if you'd like to access your VMs over the network, an extra Linux bridge has to be created and attached to the physical nic of the Debian 10 server.

Here edit the network configuration file `/etc/network/interfaces` and append the following contents:

```bash
# Configure bridge and give it a static ip
auto br0
iface br0 inet static
        address 10.10.10.10
        netmask 255.255.255.0
        network 10.10.10.1
        broadcast 10.10.10.255
        gateway 10.10.10.1
        bridge_ports eno1
        bridge_stp off
        bridge_fd 0
        bridge_maxwait 0
        dns-nameservers 8.8.8.8
```

Restart networking service to enable changes:

```bash
sudo systemctl restart network-manager
```

Next confrim whether the beidge `br0` was up:

```bash
ip a s br0
```

Output:

```bash
3: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether fe:54:00:b5:c9:02 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.1/24 brd 10.10.10.255 scope global br0
       valid_lft forever preferred_lft forever
    inet6 fe80::7c49:43ff:feaf:4d4b/64 scope link 
       valid_lft forever preferred_lft forever
```

You can check the current KVM network setting:

``bash
sudo virsh net-list --all
```

# 5. Create VM using an ISO image

Now create an Ubuntu 18.04 LTS VM.

First download the latest [Ubuntu 18.04 LTS server](https://releases.ubuntu.com/18.04/ubuntu-18.04.5-live-server-amd64.iso) ISO image. It was stored at, *e.g.*, `/data/iso/ubuntu-18.04.5-live-server-amd64.iso`. 

Let's assume the VM virtual disks store at `/data/vm/images`.

Create VM by the command `virt-install`:

```bash
sudo virt-install \
    --name ubuntu-vm \
    --os-type linux \
    --os-variant=ubuntu18.04 \
    --virt-type=kvm \
    --ram 2048 \
    --vcpu=4 \
    --hvm \
    --cdrom=/data/iso/ubuntu-18.04.5-live-server-amd64.iso \
    --network=bridge=br0,model=virtio \
    --graphics vnc \
    --disk path=/data/vm/images/ubuntu.qcow2,size=40,bus=virtio,format=qcow2
```

This command created a Ubuntu-18.04 VM, with 4 virtual CPUs, 2048 MB memory and 40 GB virtual disk.

The output:

```bash
Starting install...
Domain installation still in progress. You can reconnect to
the console to complete the installation process.
```

## 5.1 Connect the VM installation from client computer through VNC

Check VNC port with:

```bash
sudo virsh dumpxml ubuntu-vm | grep vnc
```

Output:

```bash
    <graphics type='vnc' port='5901' autoport='yes' listen='127.0.0.1'>
```

Note the VNC port value `5901`. 

The VNC display port can also be checked by:

```bash
sudo virsh vncdisplay ubuntu-vm
```

Output:

```bash
:0
```

Now create an SSH tunnel in your client computer for VNC access:

```bash
ssh myuser@192.168.1.100 -L 5901:127.0.0.1:5901
```

# 6. Useful commands

## 6.1 List running VMs/domains

```bash
sudo virsh list
```

## 6.2 Shutdown the VM/domain `ubuntu-vm`

```bash
sudo virsh shutdown ubuntu-vm
```

## 6.3 Start VM/domain `ubuntu-vm`

```bash
sudo virsh start ubuntu-vm
```

## 6.4 Suspend VM/domain

```bash
sudo virsh suspend ubuntu-vm
```

## 6.5 Soft (safe) reboot VM/domain

```bash
sudo virsh reboot ubuntu-vm
```

## 6.6 Hard (not safe) reset VM/domain

```bash
sudo virsh reset ubuntu-vm
```

## 6.7 Delete/remove VM/domain

```bash
sudo virsh undefine ubuntu-vm
sudo virsh destroy ubuntu-vm
```

Note: The virtual disk can **not** be deleted automatically. You need to run:

```bash
sudo rm /data/vm/images/ubuntu.qcow2
```

## 6.8 More commands of `virsh`

```bash
sudo virsh help
```

# Reference
1. https://wiki.debian.org/KVM
2. https://www.cyberciti.biz/faq/install-kvm-server-debian-linux-9-headless-server/
3. https://www.linuxtechi.com/install-configure-kvm-debian-10-buster/

